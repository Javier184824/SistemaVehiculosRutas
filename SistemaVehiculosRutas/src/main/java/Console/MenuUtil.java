/*
 * Nombre del Archivo: MenuUtil.java
 * 
 * Descripcion: Clase de utilidades para interfaces de consola. Proporciona m√©todos
 *              est√°ticos para la interacci√≥n con el usuario a trav√©s de consola,
 *              incluyendo men√∫s, entrada de datos con validaci√≥n, mensajes de
 *              estado y control de la interfaz de usuario. Facilita la creaci√≥n
 *              de interfaces de consola consistentes y amigables.
 * 
 * Nombre de los Integrantes:
 * Javier Lee Liang
 * Paulo C√©sar Herrera Arias
 * Jos√© Emilio Alvarado Mendez
 * Josu√© Santiago Hidalgo Sandoval
 */
package Console;

import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Utilidades para interfaces de consola
 * 
 * Esta clase proporciona m√©todos est√°ticos para facilitar la creaci√≥n de
 * interfaces de consola interactivas y amigables al usuario:
 * - Generaci√≥n de men√∫s con formato consistente
 * - Entrada de datos con validaci√≥n robusta
 * - Mensajes de estado con iconos visuales
 * - Control de la interfaz de usuario
 * 
 * Todos los m√©todos son est√°ticos para facilitar su uso sin instanciaci√≥n.
 */
public class MenuUtil {
    
    private static final Scanner scanner = new Scanner(System.in);
    
    /**
     * Muestra un men√∫ y obtiene la selecci√≥n del usuario
     * 
     * @param title El t√≠tulo del men√∫
     * @param options Las opciones del men√∫ (varargs)
     * @return El √≠ndice de la opci√≥n seleccionada (base 0), o -1 para entrada inv√°lida
     * 
     * Caracter√≠sticas:
     * - Formato visual consistente con separadores
     * - Opci√≥n "0" para salir/volver autom√°ticamente
     * - Validaci√≥n de entrada num√©rica
     * - Conversi√≥n autom√°tica de √≠ndice (base 1 a base 0)
     */
    public static int displayMenu(String title, String... options) {
        System.out.println("\n" + "=".repeat(50));
        System.out.println(title);
        System.out.println("=".repeat(50));
        
        for (int i = 0; i < options.length; i++) {
            System.out.printf("%d. %s%n", i + 1, options[i]);
        }
        System.out.println("0. Exit/Back");
        System.out.println("-".repeat(50));
        
        return getIntInput("Select an option: ") - 1;
    }
    
    /**
     * Obtiene entrada de tipo entero del usuario con validaci√≥n
     * 
     * @param prompt El mensaje de solicitud de entrada
     * @return El valor entero ingresado por el usuario
     * 
     * Validaciones:
     * - Maneja excepciones de tipo de entrada incorrecto
     * - Bucle infinito hasta obtener entrada v√°lida
     * - Consume caracteres inv√°lidos del buffer
     * - Mensaje de error informativo
     */
    public static int getIntInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                int value = scanner.nextInt();
                scanner.nextLine(); // consume newline
                return value;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // consume invalid input
            }
        }
    }
    
    /**
     * Obtiene entrada de tipo double del usuario con validaci√≥n
     * 
     * @param prompt El mensaje de solicitud de entrada
     * @return El valor double ingresado por el usuario
     * 
     * Validaciones:
     * - Maneja excepciones de tipo de entrada incorrecto
     * - Bucle infinito hasta obtener entrada v√°lida
     * - Consume caracteres inv√°lidos del buffer
     * - Mensaje de error informativo
     */
    public static double getDoubleInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                double value = scanner.nextDouble();
                scanner.nextLine(); // consume newline
                return value;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // consume invalid input
            }
        }
    }
    
    /**
     * Obtiene entrada de tipo String del usuario
     * 
     * @param prompt El mensaje de solicitud de entrada
     * @return La cadena ingresada por el usuario (sin espacios en blanco)
     * 
     * Caracter√≠sticas:
     * - Elimina espacios en blanco al inicio y final
     * - No valida si la entrada est√° vac√≠a
     * - Consume la l√≠nea completa del buffer
     */
    public static String getStringInput(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine().trim();
    }
    
    /**
     * Obtiene entrada de tipo String no vac√≠a del usuario
     * 
     * @param prompt El mensaje de solicitud de entrada
     * @return La cadena no vac√≠a ingresada por el usuario
     * 
     * Validaciones:
     * - Bucle hasta obtener entrada no vac√≠a
     * - Mensaje de error si la entrada est√° vac√≠a
     * - Elimina espacios en blanco autom√°ticamente
     */
    public static String getNonEmptyStringInput(String prompt) {
        String input;
        do {
            input = getStringInput(prompt);
            if (input.isEmpty()) {
                System.out.println("Input cannot be empty. Please try again.");
            }
        } while (input.isEmpty());
        return input;
    }
    
    /**
     * Obtiene confirmaci√≥n s√≠/no del usuario
     * 
     * @param prompt El mensaje de confirmaci√≥n
     * @return true para s√≠, false para no
     * 
     * Entradas v√°lidas:
     * - S√≠: "y", "yes" (case insensitive)
     * - No: "n", "no" (case insensitive)
     * - Bucle hasta obtener entrada v√°lida
     */
    public static boolean getConfirmation(String prompt) {
        while (true) {
            String input = getStringInput(prompt + " (y/n): ").toLowerCase();
            if (input.equals("y") || input.equals("yes")) {
                return true;
            } else if (input.equals("n") || input.equals("no")) {
                return false;
            } else {
                System.out.println("Please enter 'y' for yes or 'n' for no.");
            }
        }
    }
    
    /**
     * Muestra un mensaje de error con formato visual
     * 
     * @param message El mensaje de error a mostrar
     * 
     * Caracter√≠sticas:
     * - Icono visual de error (‚ùå)
     * - Formato consistente con otros mensajes
     * - Salto de l√≠nea para separaci√≥n visual
     */
    public static void showError(String message) {
        System.out.println("\n‚ùå ERROR: " + message);
    }
    
    /**
     * Muestra un mensaje de √©xito con formato visual
     * 
     * @param message El mensaje de √©xito a mostrar
     * 
     * Caracter√≠sticas:
     * - Icono visual de √©xito (‚úÖ)
     * - Formato consistente con otros mensajes
     * - Salto de l√≠nea para separaci√≥n visual
     */
    public static void showSuccess(String message) {
        System.out.println("\n‚úÖ SUCCESS: " + message);
    }
    
    /**
     * Muestra un mensaje informativo con formato visual
     * 
     * @param message El mensaje informativo a mostrar
     * 
     * Caracter√≠sticas:
     * - Icono visual de informaci√≥n (üìã)
     * - Formato consistente con otros mensajes
     * - Salto de l√≠nea para separaci√≥n visual
     */
    public static void showInfo(String message) {
        System.out.println("\nüìã INFO: " + message);
    }
    
    /**
     * Pausa la ejecuci√≥n hasta que el usuario presione Enter
     * 
     * @param message El mensaje de pausa a mostrar
     * 
     * Caracter√≠sticas:
     * - Permite al usuario leer informaci√≥n antes de continuar
     * - No requiere entrada espec√≠fica, solo Enter
     * - √ötil para controlar el flujo de la aplicaci√≥n
     */
    public static void pause(String message) {
        System.out.print("\n" + message + " (Press Enter to continue...)");
        scanner.nextLine();
    }
    
    /**
     * Limpia la consola para mejorar la legibilidad
     * 
     * Caracter√≠sticas:
     * - Detecta autom√°ticamente el sistema operativo
     * - Usa comandos espec√≠ficos para Windows y Unix/Linux
     * - Fallback a impresi√≥n de l√≠neas vac√≠as si falla
     * - Maneja excepciones de forma silenciosa
     */
    public static void clearConsole() {
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                System.out.print("\033[2J\033[H");
            }
        } catch (Exception e) {
            // Fallback: print empty lines
            for (int i = 0; i < 50; i++) {
                System.out.println();
            }
        }
    }
}
